{
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/ArgumentParser\/documentation\/ArgumentParser",
        "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/helpMessage(for:includeHidden:columns:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "ArgumentParser",
    "externalID" : "s:14ArgumentParser15ParsableCommandPAAE11helpMessage3for13includeHidden7columnsSSAaB_pXp_SbSiSgtFZ",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "static"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "helpMessage"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "for"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:14ArgumentParser15ParsableCommandP",
        "text" : "ParsableCommand"
      },
      {
        "kind" : "text",
        "text" : ".Type, "
      },
      {
        "kind" : "externalParam",
        "text" : "includeHidden"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "columns"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Si",
        "text" : "Int"
      },
      {
        "kind" : "text",
        "text" : "?) -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:SS",
        "text" : "String"
      }
    ],
    "modules" : [
      {
        "name" : "ArgumentParser"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Type Method",
    "symbolKind" : "method",
    "title" : "helpMessage(for:includeHidden:columns:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "static"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "helpMessage"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "for"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "subcommand"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "identifier" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:14ArgumentParser15ParsableCommandP",
              "text" : "ParsableCommand"
            },
            {
              "kind" : "text",
              "text" : ".Type, "
            },
            {
              "kind" : "externalParam",
              "text" : "includeHidden"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : " = false, "
            },
            {
              "kind" : "externalParam",
              "text" : "columns"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Si",
              "text" : "Int"
            },
            {
              "kind" : "text",
              "text" : "? = nil) -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SS",
              "text" : "String"
            }
          ]
        }
      ],
      "kind" : "declarations"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/argumentparser\/parsablecommand\/helpmessage(for:includehidden:columns:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://ArgumentParser/documentation/ArgumentParser": {
  "abstract" : [
    {
      "text" : "Straightforward, type-safe argument parsing for Swift.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ArgumentParser",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser"
},
"doc://ArgumentParser/documentation/ArgumentParser/ParsableCommand": {
  "abstract" : [
    {
      "code" : "ParsableCommand",
      "type" : "codeVoice"
    },
    {
      "text" : " types are the basic building blocks for command-line tools built using ",
      "type" : "text"
    },
    {
      "code" : "ArgumentParser",
      "type" : "codeVoice"
    },
    {
      "text" : ". To create a command, declare properties using the ",
      "type" : "text"
    },
    {
      "code" : "@Argument",
      "type" : "codeVoice"
    },
    {
      "text" : ", ",
      "type" : "text"
    },
    {
      "code" : "@Option",
      "type" : "codeVoice"
    },
    {
      "text" : ", and ",
      "type" : "text"
    },
    {
      "code" : "@Flag",
      "type" : "codeVoice"
    },
    {
      "text" : " property wrappers, or include groups of options with ",
      "type" : "text"
    },
    {
      "code" : "@OptionGroup",
      "type" : "codeVoice"
    },
    {
      "text" : ". Finally, implement your commandâ€™s functionality in the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/run()-7p2fr",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " method.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "identifier" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ParsableCommand"
    }
  ],
  "role" : "symbol",
  "title" : "ParsableCommand",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand"
},
"doc://ArgumentParser/documentation/ArgumentParser/ParsableCommand/helpMessage(for:includeHidden:columns:)": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "helpMessage"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "for"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:14ArgumentParser15ParsableCommandP",
      "text" : "ParsableCommand"
    },
    {
      "kind" : "text",
      "text" : ".Type, "
    },
    {
      "kind" : "externalParam",
      "text" : "includeHidden"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "columns"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : "?) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    }
  ],
  "identifier" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/helpMessage(for:includeHidden:columns:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "helpMessage(for:includeHidden:columns:)",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand\/helpmessage(for:includehidden:columns:)"
},
"doc://ArgumentParser/documentation/ArgumentParser/ParsableCommand/run()-7p2fr": {
  "abstract" : [

  ],
  "defaultImplementations" : 1,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "run"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    }
  ],
  "identifier" : "doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableCommand\/run()-7p2fr",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "run()",
  "type" : "topic",
  "url" : "\/documentation\/argumentparser\/parsablecommand\/run()-7p2fr"
}
}
}